#!/usr/bin/env python3
import argparse
import sys, os
from pathlib import Path
import datetime

import rclpy
import rclpy.timer, rclpy.duration
from rclpy.utilities import remove_ros_args
from rclpy.node import Node
import sensor_msgs.msg
import cv2
import cv_bridge


class ImageSaver(Node):
    def __init__(self, duration, video, output, data_topic):
        super().__init__("image_saver")
        self.video = video
        self.output_dir = output
        self.data_topic = data_topic
        self.running = True

        self.bridge = cv_bridge.CvBridge()

        self.get_logger().info(
            "Making directory for saved images/video (if it doesn't exist)."
        )

        if self.output_dir[0] != "/":
            self.path = os.path.join(Path.home(), self.output_dir)
        else:
            self.path = self.output_dir

        Path(self.path).mkdir(parents=True, exist_ok=True)

        date = datetime.datetime.now()
        self.file_base_name = "%s%s%s%s%s" % (
            date.day,
            date.month,
            date.year,
            date.hour,
            date.minute,
        )

        if self.video:
            fourcc = cv2.VideoWriter_fourcc(*"XVID")
            self.video_writer = cv2.VideoWriter(
                os.path.join(self.path, self.file_base_name + ".avi"),
                fourcc,
                15.0,
                (960, 720),
            )
            self.get_logger().info("Video saving ready.")
        else:
            self.counter = 0

        self.end_time = self.get_clock().now() + rclpy.duration.Duration(
            seconds=duration
        )

        self.data_sub = self.create_subscription(
            sensor_msgs.msg.Image, self.data_topic, self.data_callback, 1
        )

    def data_callback(self, data: sensor_msgs.msg.Image):
        if self.get_clock().now() >= self.end_time:
            self.get_logger().info("Saved enough data. Finishing node.")

            if self.video:
                self.video_writer.release()
            self.destroy_node()
            self.running = False
            return

        cv_img = self.bridge.imgmsg_to_cv2(data, desired_encoding="bgr8")

        if self.video:
            self.video_writer.write(cv_img)
        else:
            img_name = self.file_base_name + "-img" + str(self.counter) + ".jpg"
            cv2.imwrite(
                filename=os.path.join(self.path, img_name),
                img=cv_img,
                params=[cv2.IMWRITE_JPEG_QUALITY, 80],
            )
            self.counter += 1


def add_arguments(parser: argparse.ArgumentParser):
    parser.add_argument(
        "duration",
        default=20.0,
        type=float,
        nargs="?",
        metavar="N",
        help="Duration of the data recording",
    )
    parser.add_argument(
        "-v",
        "--video",
        dest="video",
        action="store_true",
        help="save output as video, not images",
    )
    parser.add_argument(
        "-o",
        "--output",
        default="data",
        type=str,
        nargs="?",
        dest="output",
        required=False,
        help="specify output directory for saved images and video",
    )
    parser.add_argument(
        "-t",
        "--topic",
        default="drone_camera/image",
        type=str,
        nargs="?",
        dest="data_topic",
        required=False,
        help="Name of the topic with camera view",
    )


if __name__ == "__main__":
    rclpy.init()

    parser = argparse.ArgumentParser(description="Record camera image from drone.")
    add_arguments(parser)

    rosargv = remove_ros_args(sys.argv)[1:]
    args = parser.parse_args(rosargv)

    image_saver = ImageSaver(args.duration, args.video, args.output, args.data_topic)

    while image_saver.running and rclpy.ok():
        try:
            rclpy.spin_once(image_saver)
        except KeyboardInterrupt:
            image_saver.get_logger().info("Got Ctrl+C, shuting down.")

            if args.video:
                image_saver.video_writer.release()

            image_saver.destroy_node()
            break

    rclpy.shutdown()
