#!/usr/bin/env python3
import argparse
import sys, os
from pathlib import Path
import pickle

import rclpy
import rclpy.timer, rclpy.duration
from rclpy.utilities import remove_ros_args
from rclpy.node import Node
import sensor_msgs.msg

# import cv2
import cv_bridge

from hand_tracking import HandTracker


class ImageSaver(Node):
    def __init__(self, duration, output, file_name, data_topic):
        super().__init__("image_saver")
        self.data_topic = data_topic
        self.running = True

        self.ht = HandTracker(640, 480, min_detection_confidence=0.6)

        self.bridge = cv_bridge.CvBridge()

        self.get_logger().info(
            "Making directory for saved images/video (if it doesn't exist)."
        )

        if output[0] != "/":
            dir_path = os.path.join(Path.home(), output)
        else:
            dir_path = output

        Path(dir_path).mkdir(parents=True, exist_ok=True)

        self.file_path = os.path.join(dir_path, file_name)

        if os.path.exists(self.file_path):
            with open(self.file_path, "rb") as handle:
                self.data = pickle.load(handle)
        else:
            self.data = []

        self.get_logger().info("Start recording?")
        start = input()

        self.data_sub = self.create_subscription(
            sensor_msgs.msg.Image, self.data_topic, self.data_callback, 1
        )

        self.end_time = self.get_clock().now() + rclpy.duration.Duration(
            seconds=duration
        )

    def data_callback(self, data: sensor_msgs.msg.Image):
        if self.get_clock().now() >= self.end_time:
            self.get_logger().info(
                f"Gathered {len(self.data)} samples. Finishing node."
            )

            with open(self.file_path, "wb") as handle:
                pickle.dump(self.data, handle, protocol=pickle.DEFAULT_PROTOCOL)

            self.destroy_node()
            self.running = False
            return

        cv_img = self.bridge.imgmsg_to_cv2(data, desired_encoding="bgr8")
        landmarks = self.ht.get_landmarks(cv_img, normalized=True)
        self.append_landmarks(landmarks)

    def append_landmarks(self, landmarks):
        if not landmarks:
            return
        final = []
        for landmark in landmarks.landmark:
            final.append([landmark.x, landmark.y, landmark.z])

        self.data.append(final)


def add_arguments(parser: argparse.ArgumentParser):
    parser.add_argument(
        "duration",
        default=20.0,
        type=float,
        nargs="?",
        metavar="N",
        help="Duration of the data recording",
    )

    parser.add_argument(
        "-o",
        "--output",
        default="data",
        type=str,
        nargs="?",
        dest="output",
        required=False,
        help="specify output directory for saved data",
    )

    parser.add_argument(
        "-n",
        "--name",
        default="up.txt",
        type=str,
        nargs="?",
        dest="file_name",
        required=False,
        help="specify name of the file with saved data",
    )

    parser.add_argument(
        "-t",
        "--topic",
        default="drone_camera/image",
        type=str,
        nargs="?",
        dest="data_topic",
        required=False,
        help="Name of the topic with camera view",
    )


if __name__ == "__main__":
    rclpy.init()

    parser = argparse.ArgumentParser(description="Record camera image from drone.")
    add_arguments(parser)

    rosargv = remove_ros_args(sys.argv)[1:]
    args = parser.parse_args(rosargv)

    image_saver = ImageSaver(
        args.duration, args.output, args.file_name, args.data_topic
    )

    while image_saver.running and rclpy.ok():
        try:
            rclpy.spin_once(image_saver)
        except KeyboardInterrupt:
            image_saver.get_logger().info("Got Ctrl+C, shuting down.")
            break

    image_saver.destroy_node()

    rclpy.shutdown()
